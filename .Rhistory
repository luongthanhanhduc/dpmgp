sapply(jss_TM[1:2], slot, "alpha")
sapply(jss_TM[1:2], slot, "alpha")
sapply(jss_TM, function(x) mean(apply(posterior(x)$topics, 1, function(z) - sum(z * log(z)))))
Topic <- topics(jss_TM[["VEM"]], 1)
Topic
Terms <- terms(jss_TM[["VEM"]], 5)
Terms[,1:5]
(topics_v24 <- topics(jss_TM[["VEM"]])[grep("/v24/", JSS_papers[, "identifier"])])
most_frequent_v24 <- which.max(tabulate(topics_v24))
terms(jss_TM[["VEM"]], 10)[, most_frequent_v24]
?list.dirs
list.dir(data_path)
data_path <- "/Users/anhduc/study/Insider Threats/PhoneLab_data"
list.dir(data_path)
list.dirs(data_path, recursive = FALSE)
list_device_path <- list.dirs(data_path, recursive = FALSE)
for (device_path in list_device_path) {
print(device_path)
}
for (device_path in list_device_path) {
list.files(device_path + "/tag/SQLite-Query-PhoneLab/2015/03/")
}
for (device_path in list_device_path) {
list.files(paste0(device_path, "/tag/SQLite-Query-PhoneLab/2015/03/"))
}
device_path <- list_device_path[[1]]
device_path
paste0(device_path, "/tag/SQLite-Query-PhoneLab/2015/03/")
list.files(paste0(device_path, "/tag/SQLite-Query-PhoneLab/2015/03/"))
for (device_path in list_device_path) {
print(list.files(paste0(device_path, "/tag/SQLite-Query-PhoneLab/2015/03/")))
}
library(rjson)
library(rjson)
file_list <- list.files(paste0(device_path, "/tag/SQLite-Query-PhoneLab/2015/03/"))
filename <- file_list[[1]]
records <- fromJSON(file = paste0(device_path, filename))
records <- fromJSON(file = paste0(device_path, "/",filename))
records <- fromJSON(file = paste0(device_path, "/tag/SQLite-Query-PhoneLab/2015/03/",filename))
records
records <- fromJSON(file = paste0(device_path, "/tag/SQLite-Query-PhoneLab/2015/03/",filename))
filename <- file_list[[2]]
records <- fromJSON(file = paste0(device_path, "/tag/SQLite-Query-PhoneLab/2015/03/",filename))
install.packages("rjsonio")
install.packages("RJSONIO")
install.packages(c("backports", "chron", "clue", "colorspace", "Cubist", "data.table", "data.tree", "dbscan", "dendextend", "DiagrammeR", "digest", "e1071", "expm", "factoextra", "fields", "ggfortify", "ggplot2", "git2r", "googleVis", "HistData", "Hmisc", "htmlTable", "jsonlite", "KFAS", "lava", "maptools", "Matrix", "mclust", "nlme", "OAIHarvester", "openssl", "plotrix", "pls", "pROC", "prodlim", "progress", "proxy", "RandomFields", "RandomFieldsUtils", "Rcpp", "RcppArmadillo", "rgl", "rmarkdown", "robustbase", "roxygen2", "rprojroot", "rsconnect", "scatterplot3d", "shiny", "skmeans", "sp", "TH.data", "tidyr", "tseries", "visNetwork", "zoo"))
detach("package:rjson", unload=TRUE)
library(RJSONIO)
records <- fromJSON(file = paste0(device_path, "/tag/SQLite-Query-PhoneLab/2015/03/",filename))
?fromJSON
?cexp
10 * exp(12/10)
install.packages(c("assertthat", "boot", "caret", "cts", "curl", "earth", "flexmix", "foreign", "formatR", "gam", "Hmisc", "htmltools", "KFAS", "lme4", "markdown", "MASS", "Matrix", "memoise", "party", "plotly", "plotmo", "quantmod", "quantreg", "RandomFields", "RandomFieldsUtils", "RcppArmadillo", "RcppEigen", "rmarkdown", "RODBC", "rpart", "rpart.plot", "rstan", "scatterplot3d", "shiny", "SparseM", "splancs", "StanHeaders", "tidyr", "topicmodels", "tseries", "XML", "zoo"))
R.version()
version()
R.Version()
(20121.14 - 1946.88 - 485.68 - 2629.38) / (13 * 2)
(20121.14 - 1946.88 - 485.68 - 2629.38) / (12 * 2)
680.44	* 13 * 2
680.44	* 13 * 2 + 1946.88 + 485.68
(1946.88 + 485.68) / 20121.14
20121.14 / 12
680.44 * 2 / 1676.762
install.packages("DPpackage")
library(DPpackage)
?BDPdensity
data(galaxy)
head(galaxy)
galaxy<-data.frame(galaxy,speeds=galaxy$speed/1000)
attach(galaxy)
state <- NULL
nburn<-1000
nsave<-10000
nskip<-10
ndisplay<-100
mcmc <- list(nburn=nburn,nsave=nsave,nskip=nskip,ndisplay=ndisplay)
prior<-list(aa0=2.01,
ab0=0.01,
kmax=1000,
a0=1,
b0=1)
fit <- BDPdensity(y=speeds,prior=prior,mcmc=mcmc,
state=state,status=TRUE)
?pnorm
pnorm(10)
qnorm(10)
qnorm(0.1)
qnorm(0)
qnorm(1)
qnorm(0.975)
qnorm(0.1)
qnorm(0.1) * 75 + 1100
qnorm(0.1)
qnorm(0.1) * (75 / sqrt(144)) + 1100
pnorm(0)
pnorm(0.5)
pnorm(-0.5)
pnorm(2)
1-pnorm(2)
(1-pnorm(2))*100
pnorm(-1)
pnorm(2)
pnorm(-1)
qnorm(0.96)
qnorm(0.95)
qnorm(0.95) * 75 + 1100
qnorm(0.95) * 7.5 + 1100
pnorm(2.23)
1-pnorm(2.23)
(1-pnorm(2.23))*100
q(0.8)
qnorm(0.8)
pnorm(-1)
pnorm(2)
pnorm(-1)
pnorm(1) - pnorm(-1)
pnorm(-1)
qnorm(0.95)*75 + 1100
qnorm(0.95)*7.5 + 1100
?t.test
?t
?qt
?t.tets
?t.test
?qt
c(-1,1) * qt(0.975, n1 + n2 - 2)
mean1 <- 6
mean2 <- 4
n1 <- 8
n2 <- 8
s1 <- 3
s2 <- 5
c(-1,1) * qt(0.975, n1 + n2 - 2)
(mean1 - mean2) + c(-1,1) * qt(0.975, n1 + n2 - 2) * Sp * sqrt((1/n1) + (1/n2))
Sp <- ((n1 - 1) * (s1^2) + (n2 - 1) * (s2^2)) / (n1 + n2 - 2)
(mean1 - mean2) + c(-1,1) * qt(0.975, n1 + n2 - 2) * Sp * sqrt((1/n1) + (1/n2))
(mean1 - mean2)
c(-1,1) * qt(0.975, n1 + n2 - 2)
Sp2 <- ((n1 - 1) * s1 + (n2 - 1) * s2) / (n1 + n2 - 2)
(mean1 - mean2) + c(-1,1) * qt(0.975, n1 + n2 - 2) * sqrt(Sp) * sqrt((1/n1) + (1/n2))
(mean1 - mean2) + c(-1,1) * qt(0.975, n1 + n2 - 2) * sqrt(Sp2) * sqrt((1/n1) + (1/n2))
conf.int <- (mean1 - mean2) + c(-1,1) * qt(0.975, n1 + n2 - 2) * sqrt(Sp2) * sqrt((1/n1) + (1/n2))
conf.int
?qqplot
rexp
?rexp
rexp(1000,1)
runif(1000)
qqplot(rexp(1000,1),runif(1000))
qqplot(runif(1000), rexp(1000,1))
?seq
plot(x=x, y=-log(1-x))
x <- seq(from=0,to=1,by=0.1)
plot(x=x, y=-log(1-x))
plot(x=x, y=1-exp(x))
plot(x=x, y=-log(1-x))
plot(x=x, y=1-exp(x))
plot(x=x, y=-log(1-x))
qqplot(runif(1000), rexp(1000,1))
plot(x=x, y=-log(1-x))
?qt
Xbar <- 1100
n <- 9
S <- 30
Xbar + c(-1,1) * qt(0.975, n-1) * S / sqrt(n)
Xbar <- -2
n <- 9
Xbar <- -2
n <- 9
qt(0.975, n-1)
2 * sqrt(n)
Xbar <- -2
n <- 9
2 * sqrt(n) / qt(0.975, n-1)
Xnew - Xold + c(-1,1) * qt(0.975, n1 + n2 - 2) * sqrt(Sp2) * sqrt((1/n1) + (1/n2))
Xnew <- 3
Xold <- 5
S2new <- 0.6
S2old <- 0.68
n1 <- 10
n2 <- 10
Sp2 <- ((n1 - 1) * S2new + (n2 - 1) * S2old) / (n1 + n2 - 2)
Xnew - Xold + c(-1,1) * qt(0.975, n1 + n2 - 2) * sqrt(Sp2) * sqrt((1/n1) + (1/n2))
qqplot(rnorm(1000), rexp(1000,1))
qqplot(rexp(1000,1), runif(1000))
?dnorm
x <- seq(from = -2, to = 2, by = 0.1)
x1 <- dnorm(x)
x1
plot(x1)
plot(x,x1)
x2 <- dnorm(a^2 * x + b)
a <- 2
b <- 1
x <- seq(from = -2, to = 2, by = 0.1)
x1 <- dnorm(x)
x2 <- dnorm(a^2 * x + b)
qqplot(x1, x2)
x <- seq(from = -2, to = 2, by = 0.01)
x1 <- dnorm(x)
x2 <- dnorm(a^2 * x + b)
qqplot(x1, x2)
x <- seq(from = -3, to = 3, by = 0.01)
x1 <- dnorm(x)
x2 <- dnorm(a^2 * x + b)
qqplot(x1, x2)
a <- 2
b <- 1
x <- seq(from = -3, to = 3, by = 0.01)
x1 <- dnorm(x)
x2 <- dnorm(a^2 * x + b)
qqplot(x1, x2)
install.packages(c("boot", "car", "cowplot", "DBI", "dplyr", "evaluate", "FactoMineR", "fda", "foreign", "ggpubr", "ggsci", "ggsignif", "knitr", "Matrix", "mgcv", "NLP", "purrr", "R6", "Rcpp", "rlang", "sp", "spam", "tidyr"))
install.packages("Rcpp")
install.packages("dplyr")
install.packages(c("BH", "factoextra", "ggpubr", "mgcv", "scales", "tibble", "tidyselect"))
rnorm(10)
Z1 <- matrix(rnorm(10), nrow = 5, ncol = 2)
Z1
Z <- list(Z1, Z2)
Z2 <- matrix(rnorm(10), nrow = 5, ncol = 2)
Z <- list(Z1, Z2)
Z
T <- length(Z)    # maximum time step
N <- nrow(Z[[1]]) # number of nodes in HPC system
M <- ncol(Z[[1]]) # number of metrics
U_bar <- matrix(NA, nrow = N, ncol = K)
K <- 2
U_bar <- matrix(NA, nrow = N, ncol = K)
V <- matrix(NA, nrow = M, ncol = K)
temp <- matrix(NA, nrow = N, ncol = K)
U_hat <- list()
for (t in 1:T) {
U_hat[[t]] <- temp
}
U_hat
max_iter <- 100
setwd("~/github/dpmgp")
rm(list = ls())
setwd("~/github/dpmgp")
coeff <- matrix(runif(9, min = 0, max = 10), nrow = 3, ncol = 3)
coeff
coeff <- matrix(runif(9, min = 0, max = 10), nrow = 3, ncol = 3)
dat <- data.frame(x = NULL, y = NULL, z = NULL)
for (n in 1:100) {
x <- rpois(10, lambda = 10)
z <- sample(1:3)
y <- cbind(1, x, x^2) %*% coeff[, z] + rnorm(length(x))
z_vec <- c(z_vec, z)
dat <- rbind(dat, cbind(x, y, z))
}
dat <- data.frame(x = NULL, y = NULL, z = NULL)
for (n in 1:100) {
x <- rpois(10, lambda = 10)
z <- sample(1:3)
y <- cbind(1, x, x^2) %*% coeff[, z] + rnorm(length(x))
dat <- rbind(dat, cbind(x, y, z))
}
warnings()
n <- 1
x <- rpois(10, lambda = 10)
z <- sample(1:3)
y <- cbind(1, x, x^2) %*% coeff[, z] + rnorm(length(x))
x
x <- runif(rpois(1, lambda = 10), min = 0, max = 10)
x
z <- sample(1:3)
y <- cbind(1, x, x^2) %*% coeff[, z] + rnorm(length(x))
y
cbind(1, x, x^2)
dim(cbind(1, x, x^2))
dim(cbind(1, x, x^2) %*% coeff)
dim(cbind(1, x, x^2) %*% coeff[, z])
coeff[, z]
z
z <- sample(1:3, n = 1)
?sample
z <- sample(1:3, size = 1)
z
y <- cbind(1, x, x^2) %*% coeff[, z] + rnorm(length(x))
y
dat <- rbind(dat, cbind(x, y, z))
cbind(x, y, z)
day
dat
dat <- data.frame(x = NULL, y = NULL, z = NULL)
for (n in 1:100) {
x <- runif(rpois(1, lambda = 10), min = 0, max = 10)
z <- sample(1:3, size = 1)
y <- cbind(1, x, x^2) %*% coeff[, z] + rnorm(length(x))
dat <- rbind(dat, cbind(x, y, z))
}
head(dat)
names(dat)
dat <- data.frame(x = NULL, y = NULL, z = NULL)
names(dat)
colnames(dat)
dat <- data.frame(x = NULL, y = NULL, z = NULL)
colnames(dat)
colnames(dat) <- c("x", "y", "z")
dat <- data.frame(x = NULL, y = NULL, z = NULL)
for (n in 1:100) {
x <- runif(rpois(1, lambda = 10), min = 0, max = 10)
z <- sample(1:3, size = 1)
y <- cbind(1, x, x^2) %*% coeff[, z] + rnorm(length(x))
dat <- rbind(dat, cbind(x, y, z))
}
colnames(dat) <- c("x", "y", "z")
library(ggplot2)
ggplot(data = dat, aes(x = x, y = y, color = z)) + geom_point()
coeff <- matrix(runif(9, min = 0, max = 1), nrow = 3, ncol = 3)
dat <- data.frame(x = NULL, y = NULL, z = NULL)
for (n in 1:100) {
x <- runif(rpois(1, lambda = 10), min = 0, max = 10)
z <- sample(1:3, size = 1)
y <- cbind(1, x, x^2) %*% coeff[, z] + rnorm(length(x))
dat <- rbind(dat, cbind(x, y, z))
}
colnames(dat) <- c("x", "y", "z")
ggplot(data = dat, aes(x = x, y = y, color = z)) + geom_point()
coeff <- matrix(runif(12, min = 0, max = 1), nrow = 3, ncol = 3)
dat <- data.frame(x = NULL, y = NULL, z = NULL)
coeff <- matrix(runif(12, min = 0, max = 1), nrow = 4, ncol = 3)
dat <- data.frame(x = NULL, y = NULL, z = NULL)
for (n in 1:100) {
x <- runif(rpois(1, lambda = 10), min = 0, max = 10)
z <- sample(1:3, size = 1)
y <- cbind(1, x, x^2, x^3) %*% coeff[, z] + rnorm(length(x))
dat <- rbind(dat, cbind(x, y, z))
}
colnames(dat) <- c("x", "y", "z")
ggplot(data = dat, aes(x = x, y = y, color = z)) + geom_point()
dat$z <- as.discrete(dat$z)
dat$z <- factor(dat$z)
ggplot(data = dat, aes(x = x, y = y, color = z)) + geom_point()
coeff <- matrix(runif(12, min = 0, max = 1), nrow = 4, ncol = 3)
dat <- data.frame(x = NULL, y = NULL, z = NULL)
for (n in 1:100) {
x <- runif(rpois(1, lambda = 10), min = 0, max = 10)
z <- sample(1:3, size = 1)
y <- cbind(1, x, x^2, x^3) %*% coeff[, z] + rnorm(length(x))
dat <- rbind(dat, cbind(x, y, z))
}
colnames(dat) <- c("x", "y", "z")
dat$z <- factor(dat$z)
ggplot(data = dat, aes(x = x, y = y, color = z)) + geom_point()
coeff <- matrix(runif(12, min = 0, max = 1), nrow = 4, ncol = 3)
coeff[1, ] <- c(10, -10, 4, -7)
dat <- data.frame(x = NULL, y = NULL, z = NULL)
for (n in 1:100) {
x <- runif(rpois(1, lambda = 10), min = 0, max = 10)
z <- sample(1:3, size = 1)
y <- cbind(1, x, x^2, x^3) %*% coeff[, z] + rnorm(length(x))
dat <- rbind(dat, cbind(x, y, z))
}
coeff <- matrix(runif(12, min = 0, max = 1), nrow = 4, ncol = 3)
coeff[1, ] <- c(10, -10, 4, )
dat <- data.frame(x = NULL, y = NULL, z = NULL)
for (n in 1:100) {
x <- runif(rpois(1, lambda = 10), min = 0, max = 10)
z <- sample(1:3, size = 1)
y <- cbind(1, x, x^2, x^3) %*% coeff[, z] + rnorm(length(x))
dat <- rbind(dat, cbind(x, y, z))
}
coeff <- matrix(runif(12, min = 0, max = 1), nrow = 4, ncol = 3)
coeff[1, ] <- c(10, -10, 4)
dat <- data.frame(x = NULL, y = NULL, z = NULL)
for (n in 1:100) {
x <- runif(rpois(1, lambda = 10), min = 0, max = 10)
z <- sample(1:3, size = 1)
y <- cbind(1, x, x^2, x^3) %*% coeff[, z] + rnorm(length(x))
dat <- rbind(dat, cbind(x, y, z))
}
colnames(dat) <- c("x", "y", "z")
dat$z <- factor(dat$z)
ggplot(data = dat, aes(x = x, y = y, color = z)) + geom_point()
coeff <- matrix(runif(12, min = -1, max = 1), nrow = 4, ncol = 3)
coeff[1, ] <- c(10, -10, 4)
dat <- data.frame(x = NULL, y = NULL, z = NULL)
for (n in 1:100) {
x <- runif(rpois(1, lambda = 10), min = 0, max = 10)
z <- sample(1:3, size = 1)
y <- cbind(1, x, x^2, x^3) %*% coeff[, z] + rnorm(length(x))
dat <- rbind(dat, cbind(x, y, z))
}
colnames(dat) <- c("x", "y", "z")
dat$z <- factor(dat$z)
ggplot(data = dat, aes(x = x, y = y, color = z)) + geom_point()
coeff <- matrix(runif(12, min = -1, max = 1), nrow = 4, ncol = 3)
coeff[1, ] <- runif(3, min = -100, max = 100)
dat <- data.frame(x = NULL, y = NULL, z = NULL)
for (n in 1:100) {
x <- runif(rpois(1, lambda = 10), min = 0, max = 10)
z <- sample(1:3, size = 1)
y <- cbind(1, x, x^2, x^3) %*% coeff[, z] + rnorm(length(x))
dat <- rbind(dat, cbind(x, y, z))
}
coeff <- matrix(runif(12, min = -1, max = 1), nrow = 4, ncol = 3)
coeff[1, ] <- runif(3, min = -500, max = 500)
dat <- data.frame(x = NULL, y = NULL, z = NULL)
for (n in 1:100) {
x <- runif(rpois(1, lambda = 10), min = 0, max = 10)
z <- sample(1:3, size = 1)
y <- cbind(1, x, x^2, x^3) %*% coeff[, z] + rnorm(length(x))
dat <- rbind(dat, cbind(x, y, z))
}
colnames(dat) <- c("x", "y", "z")
dat$z <- factor(dat$z)
ggplot(data = dat, aes(x = x, y = y, color = z)) + geom_point()
set.seed(1)
coeff <- matrix(runif(12, min = -1, max = 1), nrow = 4, ncol = 3)
coeff[1, ] <- runif(3, min = -500, max = 500)
dat <- data.frame(x = NULL, y = NULL, z = NULL)
for (n in 1:100) {
x <- runif(rpois(1, lambda = 10), min = 0, max = 10)
z <- sample(1:3, size = 1)
y <- cbind(1, x, x^2, x^3) %*% coeff[, z] + rnorm(length(x))
dat <- rbind(dat, cbind(x, y, z))
}
colnames(dat) <- c("x", "y", "z")
dat$z <- factor(dat$z)
ggplot(data = dat, aes(x = x, y = y, color = z)) + geom_point()
rm(list = ls())
setwd("~/github/dpmgp")
library(ggplot2)
set.seed(1)
coeff <- matrix(runif(12, min = -1, max = 1), nrow = 4, ncol = 3)
coeff[1, ] <- runif(3, min = -500, max = 500)
dat <- data.frame(x = NULL, y = NULL, z = NULL)
for (n in 1:100) {
x <- runif(rpois(1, lambda = 10), min = 0, max = 10)
z <- sample(1:3, size = 1)
y <- cbind(1, x, x^2, x^3) %*% coeff[, z] + rnorm(length(x))
dat <- rbind(dat, cbind(x, y, z))
}
colnames(dat) <- c("x", "y", "z")
dat$z <- factor(dat$z)
ggplot(data = dat, aes(x = x, y = y, color = z)) + geom_point()
K <- 20 # set the maximum number of clusters
Z <- matrix(runif(nrow(dat) * K), nrow = nrow(dat), ncol = K)
Z <- apply(Z, 2, sum)
dim(Z)
?apply\
?apply
Z <- apply(Z, 0, sum)
Z <- matrix(runif(nrow(dat) * K), nrow = nrow(dat), ncol = K)
Z <- apply(Z, 0, sum)
Z
Z <- matrix(runif(nrow(dat) * K), nrow = nrow(dat), ncol = K)
Z <- Z / rowSums(Z)
Z
dim(Z)
rowSums(Z)
head(Z)
ggplot(data = dat, aes(x = x, y = y, color = z)) + geom_point()
temp <- matrix(1:4, nrow = 2)
exp(temp)
K <- matrix(0, nrow = N, ncol = N)
N <- nrow(dat)
K <- matrix(0, nrow = N, ncol = N)
for (i in 1:N-1) {
for (j in i+1:N) {
K[i, j] <- (dat[i, "x"] - dat[j, "x"])^2
K[j, i] <- K[i, j]
}
}
for (i in 1:N-1) {
for (j in i+1:N) {
print(paste0(i, " ", j))
K[i, j] <- (dat[i, "x"] - dat[j, "x"])^2
K[j, i] <- K[i, j]
}
}
N
K <- matrix(0, nrow = N, ncol = N)
for (i in 1:N-1) {
for (j in (i+1):N) {
print(paste0(i, " ", j))
K[i, j] <- (dat[i, "x"] - dat[j, "x"])^2
K[j, i] <- K[i, j]
}
}
head(K)
K
K <- dist(dat$x)
dim(K)
class(K)
K <- as.matrix(dist(dat$x))
K[1,1]
K[1,2]
dim(K)
dat[1, "x"] - dat[2, "x"]
dat[1, "x"] - dat[3, "x"]
K[1,3]
K[3, 1]
K <- K * (-theta[2] / 2)
theta <- c(1, 0.005) # hyper-parameters for co-variance function
K <- as.matrix(dist(dat$x))
K <- K * (-theta[2] / 2)
K <- exp(K)
K <- K * theta[1]
temp <- diag(Z[, k])
temp <- diag(Z[, 1])
temp
temp[1,1]
temp[1,2]
temp[1,3]
temp[1,4]
temp[1,5]
temp[1,2]
temp[2,2]
temp[3,3]
